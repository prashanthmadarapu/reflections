1. What happens when you initialize a repository? Why do you need to do it?
On initialization, ".git" is generated in the directory where we run the command. We have to do it to make the directory to be recognized as a git repository and we can track the changes and do version management for the files in that directory.

2. How can you use the staging area to make sure you have one commit per logical change?
We can use staging area to add files one by one or files related to one logical change. As one logical change might affect more than one file and we might be changing multiple files on different times, the staging area helps to add them without actually committing to the repository but keeping them safely in staging area. And git provides diff between working and staging area as well as staging and repository version, we can always make sure whether our changes are correct and are related to one logical change and then only commit them to repository.

3. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches will be helpful when you want to work on experimental features, off work features and features that might affect the product big time and we want to make sure they work properly isoalted.

4. How do the diagrams help you visualize the branch structure?
Using diagrams, we can visualize the commit log, the order of commits(by arrow), at which commit the new branches are created and also the commits which does not belong to any branch.

5. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches results in combining the changes in those two branches into the required branch. This way, we can merge the experimental features into productive code once they are fully tested and are up to expectations. By representing the merge that way, we can visualize which commit of a branch is merged onto the other branch and what are all the commits belong to the merged branch.

6. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Auto-merge
Pros:
Automatic merging is easy way of merging without any tedious lookup into the code
The merger do not need to know the contents of the files being merged
Cons: 
Sometimes two branches might contain conflicting changes in the same files. So, the merge might result in loss of code of one of the branch. So, it is not safe always.
Manual-merge
Pros:
Manual merge makes sure that there is no loss of code or no unintentional introduce of bugs
Cons:
Very tedious to look up manually and merge the changes.

7. 