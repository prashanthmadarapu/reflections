1. What is Express.js?
>> Express.js is a micro framework around node.js to ease the development with node.js as it is low level.
>> It provides tools to develop apps using node.js faster

2. What are some benefits using Express.js?
>> It allows you to generate routes for your app and to use templates

3. How to install it and use it?
>> install express.js using npm install express
>> can be imported like any other module in an app using var express = require("express");
>> You should create an install of it to use its apis like var app = express();
>> app contains all the apis exposed by Express.js framework like app.get();

4. How it makes routes handling easy?
>> With node.js it is very hard to manage routes as it has to be done with nested if's and does not support dynamic routings
>> With express.js, we can use express.get("/route/1", function(req, res) {}) to easily map each route to its own logic.
>> Also, can support dynamic routes using variables in the route which should be prefixed with ":" like "route/:routeNumber/path".
And the variable can be read using req.params.routeNumber. This way it can support REST services efficiently.
>> The invalid routes can be handled using express.use(function(req, res, next){});

5. What are templates?
>> tempaltes are useful to generate dynamic html content.
>> they are just files with any extension and having html code with dynamic placeholders for variables
>> We can use variables, for loops and conditions in templates
>> There are many template languages like PHP, Twig, JSP, EJS, Smarty, Haml and Jade.
>> Express.js allows to use most of these languages.

6. What is Embedded JavaScript and how to write templates using it?
>> Embedded JavaScript also referred to as EJS is a template language.
>> It can be installed like any other npm module i.e, npm install ejs
>> the template file will have an extension of "ejs" like myTemplate.ejs
>> example content of a template file say homePage.ejs is,
<h1>You're in the bedroom </h1>
<p>You're on floor no <%= floor %></p>
where "floor" is a variable passed by the caller to this template and replaced in runtime.
>> Scriptlets can be written like above <%= %> to use variables
>> Script tags like <% %> can be used to write javascript native code like for loops, conditions etc

7. How can we use templates in Express.js?
>> Express.js allows us to use templates by providing an api on response object.
>> You can use response.render("<template-file-name>.ejs", {}<required input in the json format>)
>> for ex: for the above sample code, response.render("homePage.ejs", {"floor" : floorNumber});
>> By default Express.js searches for the given template file in a subfolder called "views". So, you should place your template
file in a subfolder called "views"

8. How Express.js works internally?
>> Express.js is a framework based on middleware which are application modules each providing a specific feature.
>> We can load whichever middleware we want to use.
>> It has 15 pieces of middleware, each of which is a micro feature.
>> eg: compression, cookie-parser, serve-favicon, serve-static, cookie-session, csrf etc
>> These pieces of middleware are interconnected and can communicate with each other. 
>> They communicate with each other by sending upto 4 settings/arguments "err", "request", "response", "next"
>> These pieces used to be part of a module called "Connect" as part of Express. But now all of them are separate modules 
except serve-static/static. So, they have to be installed and imported separately .

9. How to use middleware in Express.js?
>> Any piece of middleware can be used using app.use();
>> but before usign them, you have to install the required piece of middleware using npm install.
>> and import the piece using require.
>> the order of loading of middleware pieces is importent as they are interconnected.
