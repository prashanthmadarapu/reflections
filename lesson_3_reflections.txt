1. When would you want to use a remote repository rather than keeping all your work local?
Remote repositories help manypeople across locations to work on projects collaboratively. This is very helpul for open source projects.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
My local repository might contain changes which are not available yet on remote repository as i will be working on some changes at any point of time. So, the auto pull might result in loss of my changes or conflictions. So, it is always better to pull changes manually whenever we want to get latest code to ensure that our current work is not disturbed.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks useful to copy repositories from other's accounts when you don't have permissions to directly change their files.
Clones useful to copy repositories from remote location to our local computer and also from one location in local computer to other location.
Branches useful to maintain versions, work on off topics, work on experimental features in a project, risky features.
Everything has its own use, so as explained in uses above, based on the usage we have to use the correct one.

4. What is the benefit of having a copy of the last known state of the remote stored locally?
The state of remote will be helpful in determing what delta changes to fetch from remote, status of the local compared to remote and it eases the local development by allowing late merging with remote status giving us the merge differences.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
If we do not use collaboration tools like Git or GitHub, when we have changes, we have to send them manually to the reviewers through mails or ask the reviewer to come to our screen, if co-located. Also, if we have similar files and we are not co-located, merging conflicting changes could be tedious as we have to sync over phone or chat and do the merging. So, i don't think anything will be easier without collaboration tools.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Separate branch makes it easy for collaborative changes across locations and also it makes easy for reviewing by others contributing to the project.
Benefits of making changes directly in master: Easy for developement
Benefits of making changes in different branch: Easy for getting changes reviewed, safe process in a collaborative environment
 

